@page "/addpet"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Data.TableStorage
@using PetAdoption.Data.TableStorage.Enums
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@attribute [Authorize(Roles = "Shelter")]
@inject IUserService UserService
@inject IShelterService ShelterService
@inject IPetService PetService
@inject IAzureBlobStorageService BlobStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Add Pet - Madeira Pet Adoption</PageTitle>

<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h3 class="mb-0">Add New Pet</h3>
                </div>
                <div class="card-body p-4">
                    @if (!isPetSaved)
                    {
                        <div class="alert alert-info">
                            <strong>Complete Pet Information</strong>
                            <p class="mb-0">Please complete all required fields and save the pet information before you can navigate to other pages.</p>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (currentPet != null && currentShelter != null)
                    {
                        <EditForm Model="currentPet" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">@successMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <!-- Pet Basic Information -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Basic Information</h5>
                                
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Pet Name <span class="text-danger">*</span></label>
                                        <InputText @bind-Value="currentPet.PartitionKey" class="form-control" placeholder="Enter pet name" />
                                        <ValidationMessage For="@(() => currentPet.PartitionKey)" />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Birth Date <span class="text-danger">*</span></label>
                                        <InputDate @bind-Value="petBirthDate" class="form-control" />
                                        <ValidationMessage For="@(() => currentPet.RowKey)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Species (Optional)</label>
                                        <InputText @bind-Value="currentPet.Species" class="form-control" placeholder="e.g., Dog, Cat" />
                                        <ValidationMessage For="@(() => currentPet.Species)" />
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Breed (Optional)</label>
                                        <InputText @bind-Value="currentPet.Breed" class="form-control" placeholder="e.g., Labrador, Siamese" />
                                        <ValidationMessage For="@(() => currentPet.Breed)" />
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Colour (Optional)</label>
                                        <InputText @bind-Value="currentPet.Colour" class="form-control" placeholder="e.g., Brown, Black" />
                                        <ValidationMessage For="@(() => currentPet.Colour)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Gender <span class="text-danger">*</span></label>
                                        <InputSelect @bind-Value="currentPet.Gender" class="form-select">
                                            <option value="">-- Select Gender --</option>
                                            @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                                            {
                                                <option value="@gender">@gender</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentPet.Gender)" />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Size <span class="text-danger">*</span></label>
                                        <InputSelect @bind-Value="currentPet.Size" class="form-select">
                                            <option value="">-- Select Size --</option>
                                            @foreach (Size size in Enum.GetValues(typeof(Size)))
                                            {
                                                <option value="@size">@size</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentPet.Size)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">About <span class="text-danger">*</span></label>
                                    <InputTextArea @bind-Value="currentPet.About" class="form-control" rows="4" 
                                                   placeholder="Describe the pet's personality, behavior, and any special needs..." />
                                    <ValidationMessage For="@(() => currentPet.About)" />
                                    <small class="text-muted">@(currentPet.About?.Length ?? 0) / 2000 characters</small>
                                </div>
                            </div>

                            <!-- Adoption Status -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Adoption Status</h5>
                                
                                <div class="mb-3">
                                    <label class="form-label">Adoption Status <span class="text-danger">*</span></label>
                                    <InputSelect @bind-Value="currentPet.AdoptionStatus" class="form-select">
                                        <option value="">-- Select Status --</option>
                                        @foreach (AdoptionStatus status in Enum.GetValues(typeof(AdoptionStatus)))
                                        {
                                            <option value="@status">@status</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentPet.AdoptionStatus)" />
                                </div>
                            </div>

                            <!-- Medical Information -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Medical Information</h5>
                                
                                <div class="mb-3">
                                    <label class="form-label">Vaccinations <span class="text-danger">*</span></label>
                                    <div class="card p-3">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <h6 class="text-muted">Common Vaccinations</h6>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccRabies"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Rabies, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccRabies">Rabies</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <h6 class="text-muted">Cat Vaccinations</h6>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccTrivalent"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Trivalent, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccTrivalent">Trivalent</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFelv"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Felv, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFelv">FeLV</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFIP"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.FIP, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFIP">FIP</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFIV"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.FIV, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFIV">FIV</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-md-12">
                                                <h6 class="text-muted">Dog Vaccinations</h6>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccParvovirus"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Parvovirus, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccParvovirus">Parvovirus</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccDistemper"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Distemper, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccDistemper">Distemper</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccHepatitis"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Hepatitis, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccHepatitis">Hepatitis</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccLeptospirosis"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Leptospirosis, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccLeptospirosis">Leptospirosis</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccParainfluenza"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Parainfluenza, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccParainfluenza">Parainfluenza</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccBordetella"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Bordetella, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccBordetella">Bordetella</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccLymeDisease"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.LymeDisease, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccLymeDisease">Lyme Disease</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccCoronavirus"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Coronavirus, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccCoronavirus">Coronavirus</label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <ValidationMessage For="@(() => currentPet.Vaccinations)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Medical Treatments (Optional)</label>
                                    <InputTextArea @bind-Value="currentPet.MedicalTreatments" class="form-control" rows="3" 
                                                   placeholder="List any medical treatments the pet has received..." />
                                    <ValidationMessage For="@(() => currentPet.MedicalTreatments)" />
                                    <small class="text-muted">@(currentPet.MedicalTreatments?.Length ?? 0) / 1000 characters</small>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Known Medical Issues (Optional)</label>
                                    <InputTextArea @bind-Value="currentPet.KnownMedicalIssues" class="form-control" rows="3" 
                                                   placeholder="List any known medical issues..." />
                                    <ValidationMessage For="@(() => currentPet.KnownMedicalIssues)" />
                                    <small class="text-muted">@(currentPet.KnownMedicalIssues?.Length ?? 0) / 1000 characters</small>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-check">
                                            <InputCheckbox @bind-Value="currentPet.Dewormed" class="form-check-input" id="dewormed" />
                                            <label class="form-check-label" for="dewormed">
                                                Dewormed
                                            </label>
                                        </div>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <div class="form-check">
                                            <InputCheckbox @bind-Value="currentPet.Chipped" class="form-check-input" id="chipped" />
                                            <label class="form-check-label" for="chipped">
                                                Microchipped
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Images and Video Section -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Images & Video</h5>
                                <p class="text-muted small">Upload files or provide URLs for pet images and videos (optional)</p>

                                <!-- Image 1 -->
                                @RenderMediaInput("Image 1", 1, currentPet.Image1Url, image1UrlInput, isUploadingImage1)

                                <!-- Image 2 -->
                                @RenderMediaInput("Image 2", 2, currentPet.Image2Url, image2UrlInput, isUploadingImage2)

                                <!-- Image 3 -->
                                @RenderMediaInput("Image 3", 3, currentPet.Image3Url, image3UrlInput, isUploadingImage3)

                                <!-- Image 4 -->
                                @RenderMediaInput("Image 4", 4, currentPet.Image4Url, image4UrlInput, isUploadingImage4)

                                <!-- Video 1 -->
                                @RenderMediaInput("Video 1", 5, currentPet.Video1Url, video1UrlInput, isUploadingVideo, true)
                            </div>

                            <!-- Shelter Information (Read-only) -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Shelter Information</h5>
                                <div class="alert alert-light">
                                    <p class="mb-1"><strong>Shelter Name:</strong> @currentShelter.PartitionKey</p>
                                    <p class="mb-0"><strong>Shelter Location:</strong> @currentShelter.RowKey</p>
                                </div>
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success btn-lg" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Add Pet
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <strong>Unable to load shelter information.</strong>
                            <p class="mb-0">You must be registered as a shelter to add pets. Please complete your profile first.</p>
                            <a href="/profile" class="btn btn-primary mt-2">Go to Profile</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Pet? currentPet;
    private Shelter? currentShelter;
    private User? currentUser;
    private DateTime petBirthDate = DateTime.Today;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isPetSaved = false;
    private string? successMessage;
    private string? errorMessage;

    // URL input fields
    private string? image1UrlInput;
    private string? image2UrlInput;
    private string? image3UrlInput;
    private string? image4UrlInput;
    private string? video1UrlInput;

    // Upload progress flags
    private bool isUploadingImage1 = false;
    private bool isUploadingImage2 = false;
    private bool isUploadingImage3 = false;
    private bool isUploadingImage4 = false;
    private bool isUploadingVideo = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                if (!string.IsNullOrEmpty(email))
                {
                    currentUser = await UserService.GetUserByEmailAsync(email);
                    if (currentUser != null && !string.IsNullOrEmpty(currentUser.ShelterName) && !string.IsNullOrEmpty(currentUser.ShelterLocation))
                    {
                        currentShelter = await ShelterService.GetShelterAsync(currentUser.ShelterName, currentUser.ShelterLocation);
                        
                        if (currentShelter != null)
                        {
                            // Initialize a new pet with shelter information
                            currentPet = new Pet
                            {
                                ShelterName = currentShelter.PartitionKey,
                                ShelterLocation = currentShelter.RowKey,
                                AdoptionStatus = AdoptionStatus.NotAdopted,
                                Vaccinations = Vaccinations.none
                            };
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load shelter information: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isPetSaved)
        {
            // Register navigation guard using JavaScript
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('beforeunload', function(e) {
                    if (!window.petSaved) {
                        e.preventDefault();
                        e.returnValue = '';
                    }
                });
            ");
        }
    }

    private RenderFragment RenderMediaInput(string label, int index, string? currentUrl, string? urlInput, bool isUploading, bool isVideo = false) => builder =>
    {
        var mediaType = isVideo ? "video" : "image";
        var acceptTypes = isVideo ? "video/*" : "image/*";
        var maxSize = isVideo ? 50 * 1024 * 1024 : 5 * 1024 * 1024; // 50MB for video, 5MB for images
        var maxSizeText = isVideo ? "50MB" : "5MB";
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "mb-3");

        builder.OpenElement(2, "label");
        builder.AddAttribute(3, "class", "form-label");
        builder.AddContent(4, $"{label} (Optional)");
        builder.CloseElement();

        builder.OpenElement(5, "div");
        builder.AddAttribute(6, "class", "card p-3");

        // Radio button group for choosing input method
        builder.OpenElement(7, "div");
        builder.AddAttribute(8, "class", "mb-3");

        var radioGroupName = $"mediaInput{index}";
        var uploadRadioId = $"upload{index}";
        var urlRadioId = $"url{index}";

        builder.OpenElement(9, "div");
        builder.AddAttribute(10, "class", "form-check form-check-inline");
        
        builder.OpenElement(11, "input");
        builder.AddAttribute(12, "class", "form-check-input");
        builder.AddAttribute(13, "type", "radio");
        builder.AddAttribute(14, "name", radioGroupName);
        builder.AddAttribute(15, "id", uploadRadioId);
        builder.AddAttribute(16, "checked", true);
        builder.CloseElement();

        builder.OpenElement(17, "label");
        builder.AddAttribute(18, "class", "form-check-label");
        builder.AddAttribute(19, "for", uploadRadioId);
        builder.AddContent(20, "Upload File");
        builder.CloseElement();

        builder.CloseElement(); // form-check

        builder.OpenElement(21, "div");
        builder.AddAttribute(22, "class", "form-check form-check-inline");
        
        builder.OpenElement(23, "input");
        builder.AddAttribute(24, "class", "form-check-input");
        builder.AddAttribute(25, "type", "radio");
        builder.AddAttribute(26, "name", radioGroupName);
        builder.AddAttribute(27, "id", urlRadioId);
        builder.CloseElement();

        builder.OpenElement(28, "label");
        builder.AddAttribute(29, "class", "form-check-label");
        builder.AddAttribute(30, "for", urlRadioId);
        builder.AddContent(31, "Enter URL");
        builder.CloseElement();

        builder.CloseElement(); // form-check

        builder.CloseElement(); // mb-3

        // File upload section
        builder.OpenElement(32, "div");
        builder.AddAttribute(33, "class", "mb-2");
        
        builder.OpenElement(34, "InputFile");
        builder.AddAttribute(35, "class", "form-control");
        builder.AddAttribute(36, "accept", acceptTypes);
        builder.AddAttribute(37, "OnChange", EventCallback.Factory.Create<InputFileChangeEventArgs>(this, async e => await HandleFileSelected(e, index, isVideo)));
        builder.AddAttribute(38, "disabled", isUploading);
        builder.CloseElement();

        builder.OpenElement(39, "small");
        builder.AddAttribute(40, "class", "text-muted");
        builder.AddContent(41, $"Max file size: {maxSizeText}");
        builder.CloseElement();

        builder.CloseElement(); // mb-2

        // URL input section
        builder.OpenElement(42, "div");
        builder.AddAttribute(43, "class", "mb-2");
        
        builder.OpenElement(44, "input");
        builder.AddAttribute(45, "type", "text");
        builder.AddAttribute(46, "class", "form-control");
        builder.AddAttribute(47, "placeholder", $"Enter {mediaType} URL");
        builder.AddAttribute(48, "value", urlInput ?? "");
        builder.AddAttribute(49, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e => HandleUrlInput(e, index)));
        builder.CloseElement();

        builder.CloseElement(); // mb-2

        // Show current URL or upload status
        if (isUploading)
        {
            builder.OpenElement(50, "div");
            builder.AddAttribute(51, "class", "text-primary");
            builder.OpenElement(52, "span");
            builder.AddAttribute(53, "class", "spinner-border spinner-border-sm me-2");
            builder.CloseElement();
            builder.AddContent(54, "Uploading...");
            builder.CloseElement();
        }
        else if (!string.IsNullOrEmpty(currentUrl))
        {
            builder.OpenElement(55, "div");
            builder.AddAttribute(56, "class", "text-success");
            builder.OpenElement(57, "i");
            builder.AddAttribute(58, "class", "bi bi-check-circle me-2");
            builder.CloseElement();
            builder.AddContent(59, $"{(isVideo ? "Video" : "Image")} URL set");
            builder.OpenElement(60, "button");
            builder.AddAttribute(61, "type", "button");
            builder.AddAttribute(62, "class", "btn btn-sm btn-link text-danger");
            builder.AddAttribute(63, "onclick", EventCallback.Factory.Create(this, () => ClearMedia(index)));
            builder.AddContent(64, "Clear");
            builder.CloseElement();
            builder.CloseElement();

            // Show preview
            if (isVideo)
            {
                builder.OpenElement(65, "div");
                builder.AddAttribute(66, "class", "mt-2");
                builder.OpenElement(67, "video");
                builder.AddAttribute(68, "src", currentUrl);
                builder.AddAttribute(69, "class", "img-thumbnail");
                builder.AddAttribute(70, "style", "max-width: 200px; max-height: 150px;");
                builder.AddAttribute(71, "controls", true);
                builder.CloseElement();
                builder.CloseElement();
            }
            else
            {
                builder.OpenElement(72, "div");
                builder.AddAttribute(73, "class", "mt-2");
                builder.OpenElement(74, "img");
                builder.AddAttribute(75, "src", currentUrl);
                builder.AddAttribute(76, "class", "img-thumbnail");
                builder.AddAttribute(77, "style", "max-width: 200px; max-height: 150px;");
                builder.AddAttribute(78, "alt", $"{label} preview");
                builder.CloseElement();
                builder.CloseElement();
            }
        }

        builder.CloseElement(); // card
        builder.CloseElement(); // mb-3
    };

    private async Task HandleFileSelected(InputFileChangeEventArgs e, int index, bool isVideo)
    {
        if (currentPet == null) return;

        var file = e.File;
        if (file == null) return;

        var maxSize = isVideo ? 50 * 1024 * 1024 : 5 * 1024 * 1024; // 50MB for video, 5MB for images

        if (file.Size > maxSize)
        {
            errorMessage = $"File size exceeds maximum allowed size of {(isVideo ? "50MB" : "5MB")}";
            return;
        }

        try
        {
            SetUploadingState(index, true);
            errorMessage = null;

            using var stream = file.OpenReadStream(maxSize);
            var url = await BlobStorageService.UploadImageAsync(stream, file.Name, file.ContentType);

            SetMediaUrl(index, url);
            successMessage = $"{(isVideo ? "Video" : "Image")} uploaded successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to upload file: {ex.Message}";
        }
        finally
        {
            SetUploadingState(index, false);
        }
    }

    private void HandleUrlInput(ChangeEventArgs e, int index)
    {
        if (currentPet == null) return;

        var url = e.Value?.ToString();
        
        switch (index)
        {
            case 1:
                image1UrlInput = url;
                currentPet.Image1Url = url;
                break;
            case 2:
                image2UrlInput = url;
                currentPet.Image2Url = url;
                break;
            case 3:
                image3UrlInput = url;
                currentPet.Image3Url = url;
                break;
            case 4:
                image4UrlInput = url;
                currentPet.Image4Url = url;
                break;
            case 5:
                video1UrlInput = url;
                currentPet.Video1Url = url;
                break;
        }
    }

    private void SetMediaUrl(int index, string url)
    {
        if (currentPet == null) return;

        switch (index)
        {
            case 1:
                currentPet.Image1Url = url;
                image1UrlInput = url;
                break;
            case 2:
                currentPet.Image2Url = url;
                image2UrlInput = url;
                break;
            case 3:
                currentPet.Image3Url = url;
                image3UrlInput = url;
                break;
            case 4:
                currentPet.Image4Url = url;
                image4UrlInput = url;
                break;
            case 5:
                currentPet.Video1Url = url;
                video1UrlInput = url;
                break;
        }
    }

    private void SetUploadingState(int index, bool isUploading)
    {
        switch (index)
        {
            case 1:
                isUploadingImage1 = isUploading;
                break;
            case 2:
                isUploadingImage2 = isUploading;
                break;
            case 3:
                isUploadingImage3 = isUploading;
                break;
            case 4:
                isUploadingImage4 = isUploading;
                break;
            case 5:
                isUploadingVideo = isUploading;
                break;
        }
    }

    private void ClearMedia(int index)
    {
        if (currentPet == null) return;

        switch (index)
        {
            case 1:
                currentPet.Image1Url = null;
                image1UrlInput = null;
                break;
            case 2:
                currentPet.Image2Url = null;
                image2UrlInput = null;
                break;
            case 3:
                currentPet.Image3Url = null;
                image3UrlInput = null;
                break;
            case 4:
                currentPet.Image4Url = null;
                image4UrlInput = null;
                break;
            case 5:
                currentPet.Video1Url = null;
                video1UrlInput = null;
                break;
        }
    }

    private void ToggleVaccination(Vaccinations vaccination, bool isChecked)
    {
        if (currentPet == null) return;

        if (isChecked)
        {
            currentPet.Vaccinations |= vaccination;
        }
        else
        {
            currentPet.Vaccinations &= ~vaccination;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (currentPet == null || currentShelter == null) return;

        isSaving = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Set the RowKey from the birth date
            currentPet.RowKey = petBirthDate.ToString("yyyy-MM-dd");

            // Validate that required fields are set
            var validationContext = new ValidationContext(currentPet);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(currentPet, validationContext, validationResults, true);

            if (!isValid)
            {
                errorMessage = "Please complete all required fields: " + 
                    string.Join(", ", validationResults.Select(r => r.ErrorMessage));
                return;
            }

            // Add pet to storage
            await PetService.AddPetAsync(currentPet);
            
            isPetSaved = true;
            successMessage = $"Pet '{currentPet.PartitionKey}' has been added successfully! You can now navigate to other pages or add another pet.";
            
            // Allow navigation after pet is saved
            await JSRuntime.InvokeVoidAsync("eval", "window.petSaved = true;");

            // Reset form for another pet
            currentPet = new Pet
            {
                ShelterName = currentShelter.PartitionKey,
                ShelterLocation = currentShelter.RowKey,
                AdoptionStatus = AdoptionStatus.NotAdopted,
                Vaccinations = Vaccinations.none
            };
            petBirthDate = DateTime.Today;
            
            // Reset media inputs
            image1UrlInput = null;
            image2UrlInput = null;
            image3UrlInput = null;
            image4UrlInput = null;
            video1UrlInput = null;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to add pet: " + ex.Message;
            isPetSaved = false;
        }
        finally
        {
            isSaving = false;
        }
    }
}