@page "/editpet/{PetName}/{BirthDate}"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Data.TableStorage
@using PetAdoption.Data.TableStorage.Enums
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using PetAdoption.Web.Components.Shared
@attribute [Authorize(Roles = "Shelter")]
@inject IUserService UserService
@inject IShelterService ShelterService
@inject IPetService PetService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<EditPet> Logger
@rendermode InteractiveServer

<PageTitle>Edit Pet - Madeira Pet Adoption</PageTitle>

<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-warning text-dark d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">Edit Pet</h3>
                    <a href="/mypets" class="btn btn-secondary">
                        <i class="fa fa-arrow-left"></i> Back to My Pets
                    </a>
                </div>
                <div class="card-body p-4">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (currentPet != null && currentShelter != null)
                    {
                        <EditForm Model="currentPet" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">@successMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <!-- Note about name and birth date -->
                            <div class="alert alert-info">
                                <strong>Note:</strong> Pet name and birth date cannot be changed as they are used as unique identifiers.
                            </div>

                            <!-- Pet Basic Information -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Basic Information</h5>
                                
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Pet Name</label>
                                        <input type="text" class="form-control" value="@currentPet.PartitionKey" disabled />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Birth Date</label>
                                        <input type="text" class="form-control" value="@DateTime.Parse(currentPet.RowKey).ToShortDateString()" disabled />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Species (Optional)</label>
                                        <InputText @bind-Value="currentPet.Species" class="form-control" placeholder="e.g., Dog, Cat" />
                                        <ValidationMessage For="@(() => currentPet.Species)" />
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Breed (Optional)</label>
                                        <InputText @bind-Value="currentPet.Breed" class="form-control" placeholder="e.g., Labrador, Siamese" />
                                        <ValidationMessage For="@(() => currentPet.Breed)" />
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <label class="form-label">Colour (Optional)</label>
                                        <InputText @bind-Value="currentPet.Colour" class="form-control" placeholder="e.g., Brown, Black" />
                                        <ValidationMessage For="@(() => currentPet.Colour)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Gender <span class="text-danger">*</span></label>
                                        <InputSelect @bind-Value="currentPet.Gender" class="form-select">
                                            @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                                            {
                                                <option value="@gender">@gender</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentPet.Gender)" />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">Size <span class="text-danger">*</span></label>
                                        <InputSelect @bind-Value="currentPet.Size" class="form-select">
                                            @foreach (Size size in Enum.GetValues(typeof(Size)))
                                            {
                                                <option value="@size">@size</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentPet.Size)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">About <span class="text-danger">*</span></label>
                                    <InputTextArea @bind-Value="currentPet.About" class="form-control" rows="4" 
                                                   placeholder="Describe the pet's personality, behavior, and any special needs..." />
                                    <ValidationMessage For="@(() => currentPet.About)" />
                                    <small class="text-muted">@(currentPet.About?.Length ?? 0) / 2000 characters</small>
                                </div>
                            </div>

                            <!-- Adoption Status -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Adoption Status</h5>
                                
                                <div class="mb-3">
                                    <label class="form-label">Adoption Status <span class="text-danger">*</span></label>
                                    <InputSelect @bind-Value="currentPet.AdoptionStatus" class="form-select">
                                        @foreach (AdoptionStatus status in Enum.GetValues(typeof(AdoptionStatus)))
                                        {
                                            <option value="@status">@status</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => currentPet.AdoptionStatus)" />
                                </div>
                            </div>

                            <!-- Medical Information -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Medical Information</h5>
                                
                                <div class="mb-3">
                                    <label class="form-label">Vaccinations <span class="text-danger">*</span></label>
                                    <div class="card p-3">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <h6 class="text-muted">Common Vaccinations</h6>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccRabies"
                                                           checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Rabies)"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Rabies, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccRabies">Rabies</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <h6 class="text-muted">Cat Vaccinations</h6>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccTrivalent"
                                                           checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Trivalent)"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Trivalent, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccTrivalent">Trivalent</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFelv"
                                                           checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Felv)"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.Felv, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFelv">FeLV</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFIP"
                                                           checked="@currentPet.Vaccinations.HasFlag(Vaccinations.FIP)"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.FIP, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFIP">FIP</label>
                                                </div>
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" id="vaccFIV"
                                                           checked="@currentPet.Vaccinations.HasFlag(Vaccinations.FIV)"
                                                           @onchange="@(e => ToggleVaccination(Vaccinations.FIV, (bool)e.Value!))" />
                                                    <label class="form-check-label" for="vaccFIV">FIV</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-md-12">
                                                <h6 class="text-muted">Dog Vaccinations</h6>
                                                <div class="row">
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccParvovirus"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Parvovirus)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Parvovirus, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccParvovirus">Parvovirus</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccDistemper"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Distemper)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Distemper, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccDistemper">Distemper</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccHepatitis"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Hepatitis)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Hepatitis, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccHepatitis">Hepatitis</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccLeptospirosis"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Leptospirosis)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Leptospirosis, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccLeptospirosis">Leptospirosis</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccParainfluenza"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Parainfluenza)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Parainfluenza, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccParainfluenza">Parainfluenza</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccBordetella"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Bordetella)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Bordetella, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccBordetella">Bordetella</label>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-4">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccLymeDisease"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.LymeDisease)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.LymeDisease, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccLymeDisease">Lyme Disease</label>
                                                        </div>
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="vaccCoronavirus"
                                                                   checked="@currentPet.Vaccinations.HasFlag(Vaccinations.Coronavirus)"
                                                                   @onchange="@(e => ToggleVaccination(Vaccinations.Coronavirus, (bool)e.Value!))" />
                                                            <label class="form-check-label" for="vaccCoronavirus">Coronavirus</label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <ValidationMessage For="@(() => currentPet.Vaccinations)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Medical Treatments (Optional)</label>
                                    <InputTextArea @bind-Value="currentPet.MedicalTreatments" class="form-control" rows="3" 
                                                   placeholder="List any medical treatments the pet has received..." />
                                    <ValidationMessage For="@(() => currentPet.MedicalTreatments)" />
                                    <small class="text-muted">@(currentPet.MedicalTreatments?.Length ?? 0) / 1000 characters</small>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Known Medical Issues (Optional)</label>
                                    <InputTextArea @bind-Value="currentPet.KnownMedicalIssues" class="form-control" rows="3" 
                                                   placeholder="List any known medical issues..." />
                                    <ValidationMessage For="@(() => currentPet.KnownMedicalIssues)" />
                                    <small class="text-muted">@(currentPet.KnownMedicalIssues?.Length ?? 0) / 1000 characters</small>
                                </div>

                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <div class="form-check">
                                            <InputCheckbox @bind-Value="currentPet.Neutered" class="form-check-input" id="neutered" />
                                            <label class="form-check-label" for="neutered">
                                                Neutered
                                            </label>
                                        </div>
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <div class="form-check">
                                            <InputCheckbox @bind-Value="currentPet.Dewormed" class="form-check-input" id="dewormed" />
                                            <label class="form-check-label" for="dewormed">
                                                Dewormed
                                            </label>
                                        </div>
                                    </div>

                                    <div class="col-md-4 mb-3">
                                        <div class="form-check">
                                            <InputCheckbox @bind-Value="currentPet.Chipped" class="form-check-input" id="chipped" />
                                            <label class="form-check-label" for="chipped">
                                                Microchipped
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Images and Video Section -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">Images & Video</h5>
                                <p class="text-muted small">Update images or videos for this pet (optional)</p>

                                <MediaInput @key="@($"img1_{currentPet.PartitionKey}")" Label="Image 1" @bind-CurrentUrl="currentPet.Image1Url" />
                                <MediaInput @key="@($"img2_{currentPet.PartitionKey}")" Label="Image 2" @bind-CurrentUrl="currentPet.Image2Url" />
                                <MediaInput @key="@($"img3_{currentPet.PartitionKey}")" Label="Image 3" @bind-CurrentUrl="currentPet.Image3Url" />
                                <MediaInput @key="@($"img4_{currentPet.PartitionKey}")" Label="Image 4" @bind-CurrentUrl="currentPet.Image4Url" />
                                <MediaInput @key="@($"vid1_{currentPet.PartitionKey}")" Label="Video 1" @bind-CurrentUrl="currentPet.Video1Url" IsVideo="true" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Save Changes
                                </button>
                                <a href="/mypets" class="btn btn-secondary btn-lg">Cancel</a>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <strong>Pet not found or unauthorized access.</strong>
                            <p class="mb-0">The pet you're trying to edit doesn't exist or you don't have permission to edit it.</p>
                            <a href="/mypets" class="btn btn-primary mt-2">Go to My Pets</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string PetName { get; set; } = "";
    [Parameter] public string BirthDate { get; set; } = "";

    private Pet? currentPet;
    private Shelter? currentShelter;
    private User? currentUser;
    private bool isLoading = true;
    private bool isSaving = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                if (!string.IsNullOrEmpty(email))
                {
                    currentUser = await UserService.GetUserByEmailAsync(email);
                    if (currentUser != null && 
                        !string.IsNullOrEmpty(currentUser.ShelterName) && 
                        !string.IsNullOrEmpty(currentUser.ShelterLocation))
                    {
                        currentShelter = await ShelterService.GetShelterAsync(
                            currentUser.ShelterName, 
                            currentUser.ShelterLocation);
                        
                        if (currentShelter != null)
                        {
                            // Load the pet
                            currentPet = await PetService.GetPetAsync(PetName, BirthDate);
                            
                            // Verify this pet belongs to the current shelter
                            if (currentPet != null && 
                                (currentPet.ShelterName != currentShelter.PartitionKey || 
                                 currentPet.ShelterLocation != currentShelter.RowKey))
                            {
                                Logger.LogWarning("Unauthorized access attempt to pet {PetName} by shelter {ShelterName}", 
                                    PetName, currentShelter.PartitionKey);
                                currentPet = null;
                                errorMessage = "You don't have permission to edit this pet.";
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading pet for editing");
            errorMessage = "Failed to load pet: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleVaccination(Vaccinations vaccination, bool isChecked)
    {
        if (currentPet == null) return;

        if (isChecked)
        {
            currentPet.Vaccinations |= vaccination;
        }
        else
        {
            currentPet.Vaccinations &= ~vaccination;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (currentPet == null || currentShelter == null) return;

        isSaving = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Validate that required fields are set
            var validationContext = new ValidationContext(currentPet);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(currentPet, validationContext, validationResults, true);

            if (!isValid)
            {
                errorMessage = "Please complete all required fields: " + 
                    string.Join(", ", validationResults.Select(r => r.ErrorMessage));
                await JSRuntime.InvokeVoidAsync("scrollToTopInstant");
                return;
            }

            // Update pet in storage
            await PetService.UpdatePetAsync(currentPet);
            
            Logger.LogInformation("Updated pet: {PetName}", currentPet.PartitionKey);
            
            // Navigate back to MyPets with a success parameter
            Navigation.NavigateTo("/mypets?updated=true", forceLoad: false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating pet: {PetName}", currentPet.PartitionKey);
            errorMessage = "Failed to update pet: " + ex.Message;
            await JSRuntime.InvokeVoidAsync("scrollToTopInstant");
        }
        finally
        {
            isSaving = false;
        }
    }
}