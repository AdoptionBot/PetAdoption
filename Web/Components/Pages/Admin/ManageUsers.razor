@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Data.TableStorage
@attribute [Authorize(Policy = "AdminOnly")]
@inject IUserService UserService
@inject IShelterService ShelterService
@rendermode InteractiveServer

<PageTitle>Manage Users - Admin</PageTitle>

<div class="container mt-5 mb-5">
    <div class="card shadow">
        <div class="card-header bg-danger text-white">
            <h3 class="mb-0">User Management</h3>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (userWithShelters != null && userWithShelters.Any())
            {
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show">
                        @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>User Name</th>
                                <th>User Email</th>
                                <th>Shelter Name</th>
                                <th>Shelter City/Town</th>
                                <th>Shelter Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in userWithShelters)
                            {
                                <tr>
                                    <td>@item.User.PartitionKey</td>
                                    <td>@item.User.RowKey</td>
                                    <td>@(item.Shelter?.PartitionKey ?? "")</td>
                                    <td>@(item.Shelter?.RowKey ?? "")</td>
                                    <td>@(item.Shelter?.Email ?? "")</td>
                                    <td>
                                        <select class="form-select form-select-sm" 
                                                value="@item.User.Role"
                                                @onchange="@(e => HandleRoleChange(item.User, e))">
                                            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                                            {
                                                <option value="@role">@role</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        @if (item.User.IsAccountDisabled)
                                        {
                                            <span class="badge bg-danger">Disabled</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm @(item.User.IsAccountDisabled ? "btn-success" : "btn-warning")"
                                                @onclick="() => ToggleUserStatus(item.User)">
                                            @(item.User.IsAccountDisabled ? "Enable" : "Disable")
                                        </button>
                                        <button class="btn btn-sm btn-danger ms-2"
                                                @onclick="() => DeleteUser(item.User)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-3">
                    <p class="text-muted">Total Users: @userWithShelters.Count()</p>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No users found in the system.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private class UserWithShelter
    {
        public User User { get; set; } = null!;
        public Shelter? Shelter { get; set; }
    }

    private List<UserWithShelter>? userWithShelters;
    private bool isLoading = true;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            var allUsers = await UserService.GetAllUsersAsync();
            userWithShelters = new List<UserWithShelter>();

            foreach (var user in allUsers)
            {
                Shelter? shelter = null;

                // Try to load shelter if user has shelter references
                if (!string.IsNullOrEmpty(user.ShelterName) && !string.IsNullOrEmpty(user.ShelterLocation))
                {
                    try
                    {
                        shelter = await ShelterService.GetShelterAsync(user.ShelterName, user.ShelterLocation);
                    }
                    catch
                    {
                        // Shelter not found or error loading - continue with null
                    }
                }

                userWithShelters.Add(new UserWithShelter
                {
                    User = user,
                    Shelter = shelter
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load users: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleRoleChange(User user, ChangeEventArgs e)
    {
        if (Enum.TryParse<UserRole>(e.Value?.ToString(), out var newRole))
        {
            try
            {
                await UserService.UpdateUserRoleAsync(user.PartitionKey, user.RowKey, newRole);
                user.Role = newRole;
                successMessage = $"Role updated successfully for {user.PartitionKey}";
                errorMessage = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to update role: {ex.Message}";
                successMessage = null;
            }
        }
    }

    private async Task ToggleUserStatus(User user)
    {
        try
        {
            user.IsAccountDisabled = !user.IsAccountDisabled;
            await UserService.UpdateUserAsync(user);
            successMessage = $"User {user.PartitionKey} {(user.IsAccountDisabled ? "disabled" : "enabled")} successfully";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update user status: {ex.Message}";
            successMessage = null;
        }
    }

    private async Task DeleteUser(User user)
    {
        if (userWithShelters == null) return;

        try
        {
            await UserService.DeleteUserAsync(user.PartitionKey, user.RowKey);
            
            // Remove from local list
            var itemToRemove = userWithShelters.FirstOrDefault(x => x.User == user);
            if (itemToRemove != null)
            {
                userWithShelters.Remove(itemToRemove);
            }
            
            successMessage = $"User {user.PartitionKey} deleted successfully";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete user: {ex.Message}";
            successMessage = null;
        }
    }
}