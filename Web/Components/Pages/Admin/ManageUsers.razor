@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Data.TableStorage
@using System.ComponentModel.DataAnnotations
@using PetAdoption.Web.Components.Shared
@using Azure
@attribute [Authorize(Policy = "AdminOnly")]
@inject IUserService UserService
@inject IShelterService ShelterService
@inject IConfiguration Configuration
@rendermode InteractiveServer

<PageTitle>Manage Users - Admin</PageTitle>

<div class="user-management-page">
    <div class="container mt-5 mb-5">
        <div class="card shadow">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h3 class="mb-0">User Management</h3>
                <button class="btn btn-light btn-sm" @onclick="ShowCreateModal">
                    <i class="fa fa-plus"></i> Add New User
                </button>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading users...</p>
                    </div>
                }
                else if (userWithShelters != null && userWithShelters.Any())
                {
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fa fa-check-circle"></i> @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = null" aria-label="Close">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fa fa-exclamation-circle"></i> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close">
                                <i class="fa fa-times"></i>
                            </button>
                        </div>
                    }

                    <!-- Search and Filter Section -->
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fa fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="Search users..." 
                                       @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterUsers" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @onchange="FilterByRole">
                                <option value="">All Roles</option>
                                @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                                {
                                    <option value="@role">@role</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @onchange="FilterByStatus">
                                <option value="">All Status</option>
                                <option value="active">Active</option>
                                <option value="disabled">Disabled</option>
                            </select>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover table-striped">
                            <thead class="table-light">
                                <tr>
                                    <th>User Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Shelter</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredUsers ?? userWithShelters)
                                {
                                    <tr>
                                        <td>
                                            <strong>@item.UserName</strong>
                                            @if (item.IsFoster)
                                            {
                                                <text>&nbsp;</text><span class="badge bg-info ms-1">Foster</span>
                                            }
                                        </td>
                                        <td>@item.Email</td>
                                        <td>@item.PhoneNumber</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.ShelterName))
                                            {
                                                <div>
                                                    <strong>@item.ShelterName</strong><br />
                                                    <small class="text-muted">@item.ShelterLocation</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @GetRoleBadgeClass(item.Role)">
                                                @item.Role
                                            </span>
                                        </td>
                                        <td>
                                            @if (item.IsAccountDisabled)
                                            {
                                                <span class="badge bg-danger">
                                                    <i class="fa fa-ban"></i> Disabled
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fa fa-check"></i> Active
                                                </span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button class="btn btn-outline-primary action-view" title="View Details"
                                                        @onclick="() => ShowViewModal(item)">
                                                    <i class="fa fa-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-success action-edit" title="Edit"
                                                        @onclick="() => ShowEditModal(item)">
                                                    <i class="fa fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-@(item.IsAccountDisabled ? "success" : "warning") action-toggle" 
                                                        title="@(item.IsAccountDisabled ? "Enable" : "Disable")"
                                                        @onclick="() => ToggleUserStatus(item)">
                                                    <i class="fa fa-@(item.IsAccountDisabled ? "check" : "ban")"></i>
                                                </button>
                                                <button class="btn btn-outline-danger action-delete" title="Delete"
                                                        @onclick="() => ShowDeleteConfirmation(item)">
                                                    <i class="fa fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="mt-3 d-flex justify-content-between align-items-center">
                        <p class="text-muted mb-0">
                            <i class="fa fa-users"></i> Total Users: <strong>@userWithShelters.Count()</strong>
                            @if (filteredUsers != null)
                            {
                                <span> | Filtered: <strong>@filteredUsers.Count()</strong></span>
                            }
                        </p>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="alert alert-info d-inline-block">
                            <i class="fa fa-info-circle"></i> No users found in the system.
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Create/Edit Modal -->
    @if (showModal)
    {
        <ModalHelper OnClose="CloseModal" ModalId="edit-modal" />
        <div id="edit-modal" class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            <i class="fa fa-@(isEditMode ? "edit" : "plus-circle")"></i>
                            @(isEditMode ? "Edit User" : "Create New User")
                        </h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseModal" aria-label="Close">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ValidatedForm Model="editingUser" OnValidSubmit="SaveUser" IsModal="true" ModalId="edit-modal">
                            <DataAnnotationsValidator />
                            
                            <!-- Basic Information Section -->
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="fa fa-user"></i> Basic Information</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">
                                                User Name
                                                @if (!isEditMode)
                                                {
                                                    <span class="text-danger">*</span>
                                                }
                                            </label>
                                            @if (isEditMode)
                                            {
                                                <input type="text" class="form-control" value="@editingUser!.PartitionKey" disabled />
                                            }
                                            else
                                            {
                                                <InputText @bind-Value="editingUser!.PartitionKey" class="form-control" placeholder="Enter user name" />
                                                <ValidationMessage For="@(() => editingUser!.PartitionKey)" class="text-danger" />
                                            }
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">
                                                Email
                                                @if (!isEditMode)
                                                {
                                                    <span class="text-danger">*</span>
                                                }
                                            </label>
                                            @if (isEditMode)
                                            {
                                                <input type="email" class="form-control" value="@editingUser!.RowKey" disabled />
                                            }
                                            else
                                            {
                                                <InputText @bind-Value="editingUser!.RowKey" class="form-control" type="email" placeholder="user@example.com" />
                                                <ValidationMessage For="@(() => editingUser!.RowKey)" class="text-danger" />
                                            }
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="editingUser!.PhoneNumber" class="form-control" 
                                                       placeholder="+1234567890" />
                                            <ValidationMessage For="@(() => editingUser!.PhoneNumber)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Country <span class="text-danger">*</span></label>
                                            <CountryDropdown @bind-Value="editingUser!.Country" CssClass="form-select" />
                                            <ValidationMessage For="@(() => editingUser!.Country)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Address <span class="text-danger">*</span></label>
                                        <InputTextArea @bind-Value="editingUser!.Address" class="form-control" rows="2" 
                                                       placeholder="Street address, city, state, zip" />
                                        <ValidationMessage For="@(() => editingUser!.Address)" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <!-- Account Settings Section -->
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="fa fa-cog"></i> Account Settings</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Role <span class="text-danger">*</span></label>
                                            <InputSelect @bind-Value="editingUser!.Role" class="form-select">
                                                @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                                                {
                                                    <option value="@role">@role</option>
                                                }
                                            </InputSelect>
                                            <ValidationMessage For="@(() => editingUser!.Role)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Account Status</label>
                                            <div class="form-check form-switch mt-2">
                                                <InputCheckbox @bind-Value="editingUser!.IsAccountDisabled" 
                                                              class="form-check-input" id="accountDisabled" />
                                                <label class="form-check-label" for="accountDisabled">
                                                    Account Disabled
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="form-check form-switch">
                                                <InputCheckbox @bind-Value="editingUser!.IsFoster" 
                                                              class="form-check-input" id="isFoster" />
                                                <label class="form-check-label" for="isFoster">
                                                    <i class="fa fa-heart"></i> Is Foster
                                                </label>
                                            </div>
                                        </div>
                                        @if (isEditMode)
                                        {
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Profile Status</label>
                                                <div class="form-check form-switch mt-2">
                                                    <input type="checkbox" class="form-check-input" id="profileCompleted"
                                                           checked="@editingUser!.IsProfileCompleted" disabled />
                                                    <label class="form-check-label" for="profileCompleted">
                                                        Profile Completed
                                                    </label>
                                                </div>
                                                <small class="form-text text-muted">Automatically set by user profile completion</small>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Shelter Association Section -->
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="fa fa-home"></i> Shelter Association</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Select Shelter</label>
                                        <select class="form-select" @onchange="OnShelterSelectionChanged">
                                            <option value="">-- None --</option>
                                            @if (availableShelters != null)
                                            {
                                                @foreach (var shelter in availableShelters)
                                                {
                                                    var shelterKey = $"{shelter.PartitionKey}|{shelter.RowKey}";
                                                    var isSelected = editingUser?.ShelterName == shelter.PartitionKey && 
                                                                    editingUser?.ShelterLocation == shelter.RowKey;
                                                    <option value="@shelterKey" selected="@isSelected">
                                                        @shelter.PartitionKey - @shelter.RowKey
                                                    </option>
                                                }
                                            }
                                        </select>
                                        <small class="form-text text-muted">Optional: Link user to a shelter</small>
                                    </div>
                                    @if (!string.IsNullOrEmpty(editingUser?.ShelterName))
                                    {
                                        <div class="alert alert-info">
                                            <strong>Selected Shelter:</strong> @editingUser.ShelterName<br />
                                            <strong>Location:</strong> @editingUser.ShelterLocation
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Social Media Section -->
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="fa fa-share-alt"></i> Social Media & Website</h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Website</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="fa fa-globe"></i></span>
                                            <InputText @bind-Value="editingUser!.Website" class="form-control" 
                                                       placeholder="https://example.com" />
                                        </div>
                                        <ValidationMessage For="@(() => editingUser!.Website)" class="text-danger" />
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Facebook</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa-brands fa-facebook"></i></span>
                                                <InputText @bind-Value="editingUser!.Facebook" class="form-control" 
                                                           placeholder="https://facebook.com/..." />
                                            </div>
                                            <ValidationMessage For="@(() => editingUser!.Facebook)" class="text-danger" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Instagram</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa-brands fa-instagram"></i></span>
                                                <InputText @bind-Value="editingUser!.Instagram" class="form-control" 
                                                           placeholder="https://instagram.com/..." />
                                            </div>
                                            <ValidationMessage For="@(() => editingUser!.Instagram)" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">X</label>
                                            <div class="input-group">
                                                <span class="input-group-text"><i class="fa-brands fa-x-twitter"></i></span>
                                                <InputText @bind-Value="editingUser!.X" class="form-control"
                                                           placeholder="https://x.com/..." />
                                            </div>
                                            <ValidationMessage For="@(() => editingUser!.X)" class="text-danger" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <ValidationSummary class="text-danger" />
                            
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                                    <i class="fa fa-times"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="fa fa-save"></i> @(isEditMode ? "Update" : "Create") User
                                </button>
                            </div>
                        </ValidatedForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- View Details Modal -->
    @if (showViewModal && viewingUser != null)
    {
        <ModalHelper OnClose="CloseViewModal" ModalId="view-modal" />
        <div id="view-modal" class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            <i class="fa fa-user-circle"></i> User Details
                        </h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseViewModal" aria-label="Close">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header bg-light">
                                        <strong>Basic Information</strong>
                                    </div>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item"><strong>Name:</strong> @viewingUser.UserName</li>
                                        <li class="list-group-item"><strong>Email:</strong> @viewingUser.Email</li>
                                        <li class="list-group-item"><strong>Phone:</strong> @viewingUser.PhoneNumber</li>
                                        <li class="list-group-item"><strong>Country:</strong> @viewingUser.Country</li>
                                        <li class="list-group-item"><strong>Address:</strong> @viewingUser.Address</li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card mb-3">
                                    <div class="card-header bg-light">
                                        <strong>Account Information</strong>
                                    </div>
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item">
                                            <strong>Role:</strong> 
                                            <span class="badge @GetRoleBadgeClass(viewingUser.Role) ms-2">@viewingUser.Role</span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Status:</strong> 
                                            <span class="badge @(viewingUser.IsAccountDisabled ? "bg-danger" : "bg-success") ms-2">
                                                @(viewingUser.IsAccountDisabled ? "Disabled" : "Active")
                                            </span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Foster:</strong> 
                                            <span class="badge @(viewingUser.IsFoster ? "bg-info" : "bg-secondary") ms-2">
                                                @(viewingUser.IsFoster ? "Yes" : "No")
                                            </span>
                                        </li>
                                        <li class="list-group-item">
                                            <strong>Profile:</strong> 
                                            <span class="badge @(viewingUser.IsProfileCompleted ? "bg-success" : "bg-warning") ms-2">
                                                @(viewingUser.IsProfileCompleted ? "Complete" : "Incomplete")
                                            </span>
                                        </li>
                                        @if (viewingUser.LastUpdated.HasValue)
                                        {
                                            <li class="list-group-item">
                                                <strong>Last Updated:</strong> @viewingUser.LastUpdated.Value.ToString("g")
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(viewingUser.ShelterName))
                        {
                            <div class="card mb-3">
                                <div class="card-header bg-light">
                                    <strong><i class="fa fa-home"></i> Shelter Information</strong>
                                </div>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item"><strong>Shelter Name:</strong> @viewingUser.ShelterName</li>
                                    <li class="list-group-item"><strong>Location:</strong> @viewingUser.ShelterLocation</li>
                                </ul>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(viewingUser.Website) || !string.IsNullOrEmpty(viewingUser.Facebook) || !string.IsNullOrEmpty(viewingUser.Instagram))
                        {
                            <div class="card">
                                <div class="card-header bg-light">
                                    <strong><i class="fa fa-share-alt"></i> Social Links</strong>
                                </div>
                                <ul class="list-group list-group-flush">
                                    @if (!string.IsNullOrEmpty(viewingUser.Website))
                                    {
                                        <li class="list-group-item">
                                            <strong>Website:</strong> 
                                            <a href="@viewingUser.Website" target="_blank">@viewingUser.Website</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(viewingUser.Facebook))
                                    {
                                        <li class="list-group-item">
                                            <strong>Facebook:</strong> 
                                            <a href="@viewingUser.Facebook" target="_blank">@viewingUser.Facebook</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(viewingUser.Instagram))
                                    {
                                        <li class="list-group-item">
                                            <strong>Instagram:</strong> 
                                            <a href="@viewingUser.Instagram" target="_blank">@viewingUser.Instagram</a>
                                        </li>
                                    }
                                    @if (!string.IsNullOrEmpty(viewingUser.X))
                                    {
                                        <li class="list-group-item">
                                            <strong>X:</strong>
                                            <a href="@viewingUser.X" target="_blank">@viewingUser.X</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseViewModal">
                            <i class="fa fa-times"></i> Close
                        </button>
                        <button type="button" class="btn btn-primary" @onclick="() => ShowEditModal(viewingUser)">
                            <i class="fa fa-edit"></i> Edit User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal && deletingUser != null)
    {
        <ModalHelper OnClose="CloseDeleteModal" ModalId="delete-modal" />
        <div id="delete-modal" class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">
                            <i class="fa fa-exclamation-triangle"></i> Confirm Delete
                        </h5>
                        <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal" aria-label="Close">
                            <i class="fa fa-times"></i>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the following user?</p>
                        <div class="alert alert-warning">
                            <strong>Name:</strong> @deletingUser.UserName<br />
                            <strong>Email:</strong> @deletingUser.Email
                        </div>
                        <p class="text-danger"><strong>This action cannot be undone!</strong></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">
                            <i class="fa fa-times"></i> Cancel
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="fa fa-trash"></i> Delete User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // Serialization-safe DTO class
    private class UserWithShelter
    {
        public required string UserName { get; set; }
        public required string Email { get; set; }
        public required string PhoneNumber { get; set; }
        public string? ShelterName { get; set; }
        public string? ShelterLocation { get; set; }
        public required UserRole Role { get; set; }
        public required bool IsAccountDisabled { get; set; }
        public required bool IsFoster { get; set; }
        public required bool IsProfileCompleted { get; set; }
        public required string Address { get; set; }
        public required string Country { get; set; }
        public string? Website { get; set; }
        public string? Facebook { get; set; }
        public string? Instagram { get; set; }
        public string? X { get; set; }
        public DateTimeOffset? LastUpdated { get; set; }
        public ETag OriginalETag { get; set; }
    }

    private List<UserWithShelter>? userWithShelters;
    private List<UserWithShelter>? filteredUsers;
    private List<Shelter>? availableShelters;
    private bool isLoading = true;
    private string? successMessage;
    private string? errorMessage;
    
    // Modal states
    private bool showModal = false;
    private bool showViewModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    
    // Edit/Create state - simplified
    private User? editingUser;
    private UserWithShelter? viewingUser;
    private UserWithShelter? deletingUser;
    
    // Filter states
    private string searchTerm = string.Empty;
    private string? selectedRole;
    private string? selectedStatus;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadShelters();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            var allUsers = await UserService.GetAllUsersAsync();
            userWithShelters = new List<UserWithShelter>();

            foreach (var user in allUsers)
            {
                Shelter? shelter = null;

                if (!string.IsNullOrEmpty(user.ShelterName) && !string.IsNullOrEmpty(user.ShelterLocation))
                {
                    try
                    {
                        shelter = await ShelterService.GetShelterAsync(user.ShelterName, user.ShelterLocation);
                    }
                    catch
                    {
                        // Shelter not found - continue
                    }
                }

                // Create serialization-safe DTO
                userWithShelters.Add(new UserWithShelter
                {
                    UserName = user.PartitionKey,
                    Email = user.RowKey,
                    PhoneNumber = user.PhoneNumber,
                    ShelterName = shelter?.PartitionKey,
                    ShelterLocation = shelter?.RowKey,
                    Role = user.Role,
                    IsAccountDisabled = user.IsAccountDisabled,
                    IsFoster = user.IsFoster,
                    IsProfileCompleted = user.IsProfileCompleted,
                    Address = user.Address,
                    Country = user.Country,
                    Website = user.Website,
                    Facebook = user.Facebook,
                    Instagram = user.Instagram,
                    X = user.X,
                    LastUpdated = user.Timestamp,
                    OriginalETag = user.ETag
                });
            }
            
            filteredUsers = null;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load users: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadShelters()
    {
        try
        {
            var shelters = await ShelterService.GetAllSheltersAsync();
            availableShelters = shelters.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load shelters: " + ex.Message;
        }
    }

    private void OnShelterSelectionChanged(ChangeEventArgs e)
    {
        if (editingUser == null) return;

        var selectedValue = e.Value?.ToString();
        
        if (string.IsNullOrEmpty(selectedValue))
        {
            // "None" option selected - clear shelter association
            editingUser.ShelterName = string.Empty;
            editingUser.ShelterLocation = string.Empty;
        }
        else
        {
            // Parse the shelter key format: "ShelterName|Location"
            var parts = selectedValue.Split('|');
            if (parts.Length == 2)
            {
                editingUser.ShelterName = parts[0];
                editingUser.ShelterLocation = parts[1];
            }
        }
    }

    private void FilterUsers()
    {
        ApplyFilters();
    }

    private void FilterByRole(ChangeEventArgs e)
    {
        selectedRole = e.Value?.ToString();
        ApplyFilters();
    }

    private void FilterByStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (userWithShelters == null) return;

        var filtered = userWithShelters.AsEnumerable();

        // Search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(x => 
                x.UserName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                x.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                x.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (x.ShelterName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        // Role filter
        if (!string.IsNullOrEmpty(selectedRole) && Enum.TryParse<UserRole>(selectedRole, out var role))
        {
            filtered = filtered.Where(x => x.Role == role);
        }

        // Status filter
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            filtered = filtered.Where(x => 
                selectedStatus == "active" ? !x.IsAccountDisabled : x.IsAccountDisabled);
        }

        filteredUsers = filtered.ToList();
    }

    private void ShowCreateModal()
    {
        var defaultCountry = Configuration["DefaultCountryValue"] ?? string.Empty;

        editingUser = new User
        {
            PartitionKey = string.Empty,
            RowKey = string.Empty,
            PhoneNumber = string.Empty,
            Address = string.Empty,
            Country = defaultCountry,
            Role = UserRole.User,
            IsAccountDisabled = false,
            IsFoster = false,
            IsProfileCompleted = false
        };
        isEditMode = false;
        showModal = true;
        ClearMessages();
    }

    private void ShowEditModal(UserWithShelter userDto)
    {
        // Create a User entity for editing
        editingUser = new User
        {
            PartitionKey = userDto.UserName,
            RowKey = userDto.Email,
            PhoneNumber = userDto.PhoneNumber,
            Address = userDto.Address,
            Country = userDto.Country,
            Website = userDto.Website,
            Facebook = userDto.Facebook,
            Instagram = userDto.Instagram,
            IsAccountDisabled = userDto.IsAccountDisabled,
            Role = userDto.Role,
            ShelterName = userDto.ShelterName ?? string.Empty,
            ShelterLocation = userDto.ShelterLocation ?? string.Empty,
            IsFoster = userDto.IsFoster,
            IsProfileCompleted = userDto.IsProfileCompleted,
            ETag = userDto.OriginalETag
        };
        isEditMode = true;
        showModal = true;
        showViewModal = false;
        ClearMessages();
    }

    private void ShowViewModal(UserWithShelter userDto)
    {
        viewingUser = userDto;
        showViewModal = true;
        ClearMessages();
    }

    private void ShowDeleteConfirmation(UserWithShelter userDto)
    {
        deletingUser = userDto;
        showDeleteModal = true;
        ClearMessages();
    }

    private void CloseModal()
    {
        showModal = false;
        editingUser = null;
    }

    private void CloseViewModal()
    {
        showViewModal = false;
        viewingUser = null;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        deletingUser = null;
    }

    private void ClearMessages()
    {
        successMessage = null;
        errorMessage = null;
    }

    private async Task SaveUser()
    {
        if (editingUser == null) return;

        isSaving = true;
        ClearMessages();
        
        try
        {
            if (isEditMode)
            {
                // Update existing user
                await UserService.UpdateUserAsync(editingUser);
                successMessage = $"User {editingUser.PartitionKey} updated successfully";
            }
            else
            {
                // Create new user
                await UserService.CreateUserAsync(editingUser);
                successMessage = $"User {editingUser.PartitionKey} created successfully";
            }
            
            CloseModal();
            
            // Reload all users to get fresh data with updated ETags and shelter associations
            await LoadUsers();
            
            // Reapply any active filters to maintain the current view
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save user: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ToggleUserStatus(UserWithShelter userDto)
    {
        ClearMessages();
        
        try
        {
            // Create a User entity for the update
            var updatedUser = new User
            {
                PartitionKey = userDto.UserName,
                RowKey = userDto.Email,
                PhoneNumber = userDto.PhoneNumber,
                Address = userDto.Address,
                Country = userDto.Country,
                Website = userDto.Website,
                Facebook = userDto.Facebook,
                Instagram = userDto.Instagram,
                X = userDto.X,
                IsAccountDisabled = !userDto.IsAccountDisabled,
                Role = userDto.Role,
                ShelterName = userDto.ShelterName ?? string.Empty,
                ShelterLocation = userDto.ShelterLocation ?? string.Empty,
                IsFoster = userDto.IsFoster,
                IsProfileCompleted = userDto.IsProfileCompleted,
                ETag = userDto.OriginalETag
            };
            
            await UserService.UpdateUserAsync(updatedUser);
            successMessage = $"User {userDto.UserName} {(!userDto.IsAccountDisabled ? "disabled" : "enabled")} successfully";
            
            // Reload all users to get fresh data
            await LoadUsers();
            
            // Reapply any active filters to maintain the current view
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update user status: {ex.Message}";
        }
    }

    private async Task ConfirmDelete()
    {
        if (deletingUser == null || userWithShelters == null) return;

        isDeleting = true;
        try
        {
            await UserService.DeleteUserAsync(deletingUser.UserName, deletingUser.Email);
            
            successMessage = $"User {deletingUser.UserName} deleted successfully";
            CloseDeleteModal();
            
            // Reload users after delete
            await LoadUsers();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete user: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }

    private string GetRoleBadgeClass(UserRole role)
    {
        return role switch
        {
            UserRole.Admin => "bg-danger",
            UserRole.Shelter => "bg-primary",
            UserRole.Foster => "bg-info",
            _ => "bg-secondary"
        };
    }
}