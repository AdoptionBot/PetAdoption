@page "/admin/users"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@attribute [Authorize(Policy = "AdminOnly")]
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Manage Users - Admin</PageTitle>

<div class="container mt-5 mb-5">
    <div class="card shadow">
        <div class="card-header bg-danger text-white">
            <h3 class="mb-0">User Management</h3>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (users != null && users.Any())
            {
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show">
                        @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = null"></button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger alert-dismissible fade show">
                        @errorMessage
                        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                    </div>
                }

                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Country</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in users)
                            {
                                <tr>
                                    <td>@user.PartitionKey</td>
                                    <td>@user.RowKey</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Country</td>
                                    <td>
                                        <select class="form-select form-select-sm" 
                                                value="@user.Role"
                                                @onchange="@(e => HandleRoleChange(user, e))">
                                            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                                            {
                                                <option value="@role">@role</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        @if (user.AccountDisabled)
                                        {
                                            <span class="badge bg-danger">Disabled</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-sm @(user.AccountDisabled ? "btn-success" : "btn-warning")"
                                                @onclick="() => ToggleUserStatus(user)">
                                            @(user.AccountDisabled ? "Enable" : "Disable")
                                        </button>
                                        <button class="btn btn-sm btn-danger ms-2"
                                                @onclick="() => DeleteUser(user)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="mt-3">
                    <p class="text-muted">Total Users: @users.Count()</p>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No users found in the system.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<User>? users;
    private bool isLoading = true;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            var allUsers = await UserService.GetAllUsersAsync();
            users = allUsers.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load users: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleRoleChange(User user, ChangeEventArgs e)
    {
        if (Enum.TryParse<UserRole>(e.Value?.ToString(), out var newRole))
        {
            try
            {
                await UserService.UpdateUserRoleAsync(user.PartitionKey, user.RowKey, newRole);
                user.Role = newRole;
                successMessage = $"Role updated successfully for {user.PartitionKey}";
                errorMessage = null;
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to update role: {ex.Message}";
                successMessage = null;
            }
        }
    }

    private async Task ToggleUserStatus(User user)
    {
        try
        {
            user.AccountDisabled = !user.AccountDisabled;
            await UserService.UpdateUserAsync(user);
            successMessage = $"User {user.PartitionKey} {(user.AccountDisabled ? "disabled" : "enabled")} successfully";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update user status: {ex.Message}";
            successMessage = null;
        }
    }

    private async Task DeleteUser(User user)
    {
        if (users == null) return;

        try
        {
            await UserService.DeleteUserAsync(user.PartitionKey, user.RowKey);
            users.Remove(user);
            successMessage = $"User {user.PartitionKey} deleted successfully";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete user: {ex.Message}";
            successMessage = null;
        }
    }
}