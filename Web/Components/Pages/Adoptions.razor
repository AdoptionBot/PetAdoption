@page "/adoptions"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Data.TableStorage
@using PetAdoption.Data.TableStorage.Enums
@using PetAdoption.Web.Components.Shared
@attribute [Authorize(Roles = "User,Shelter,Admin")]
@inject IAdoptionProcessService AdoptionProcessService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<Adoptions> Logger
@rendermode InteractiveServer

<PageTitle>My Adoptions - Madeira Pet Adoption</PageTitle>

<div class="adoptions-page-wrapper">
    <section class="hero-wrap hero-wrap-2" style="background-image: url('images/bg_2.jpg');" data-stellar-background-ratio="0.5">
        <div class="overlay"></div>
        <div class="container">
            <div class="row no-gutters slider-text align-items-end">
                <div class="col-md-9 ftco-animate pb-5">
                    <p class="breadcrumbs mb-2">
                        <span class="mr-2"><a href="/">Home <i class="ion-ios-arrow-forward"></i></a></span>
                        <span>Adoptions <i class="ion-ios-arrow-forward"></i></span>
                    </p>
                    <h1 class="mb-0 bread">@pageTitle</h1>
                </div>
            </div>
        </div>
    </section>

    <section class="ftco-section">
        <div class="container">
            @if (isLoading)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="mt-3">Loading adoption applications...</p>
                    </div>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="row">
                    <div class="col-md-12">
                        <div class="alert alert-danger">
                            <h4>Error Loading Applications</h4>
                            <p>@errorMessage</p>
                            <button class="btn btn-primary" @onclick="LoadApplicationsAsync">
                                <i class="fa fa-refresh"></i> Retry
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (!applications.Any())
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <div class="alert alert-info">
                            <i class="fa fa-info-circle fa-3x mb-3"></i>
                            <h3>No Adoption Applications</h3>
                            <p>@(isUserRole ? "You haven't submitted any adoption applications yet." : "No adoption applications have been received for your shelter's pets.")</p>
                            @if (isUserRole)
                            {
                                <a href="/pets" class="btn btn-primary mt-2">
                                    <i class="fa fa-paw"></i> Browse Available Pets
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success alert-dismissible fade show">
                        <i class="fa fa-check-circle"></i> @successMessage
                        <button type="button" class="btn-close" @onclick="() => successMessage = null" aria-label="Close"></button>
                    </div>
                }

                <div class="row mb-4">
                    <div class="col-md-12">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">
                                    <i class="fa fa-list"></i> 
                                    @(isUserRole ? "Your Adoption Applications" : "Adoption Applications for Your Pets")
                                </h5>
                                <p class="text-muted mb-0">
                                    Total Applications: <strong>@applications.Count</strong>
                                    @if (applications.Count(a => a.AdoptionStatus == AdoptionStatus.Adopted) > 0)
                                    {
                                        <span class="ms-3">
                                            <i class="fa fa-heart text-danger"></i> 
                                            Successfully Adopted: <strong class="text-success">@applications.Count(a => a.AdoptionStatus == AdoptionStatus.Adopted)</strong>
                                        </span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    @foreach (var application in applications)
                    {
                        var pet = applicationPets.ContainsKey(application) ? applicationPets[application] : null;
                        var applicantUser = applicationUsers.ContainsKey(application) ? applicationUsers[application] : null;
                        var isAdopted = application.AdoptionStatus == AdoptionStatus.Adopted;

                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm application-card @(isAdopted ? "adopted-card" : "")">
                                @if (isAdopted)
                                {
                                    <div class="adoption-celebration-ribbon">
                                        <i class="fa fa-heart"></i> ADOPTED <i class="fa fa-heart"></i>
                                    </div>
                                }
                                <div class="card-header bg-@GetStatusColor(application.AdoptionStatus) text-white">
                                    <h6 class="mb-0">
                                        <i class="fa fa-paw"></i> @application.PetName
                                        @if (isAdopted)
                                        {
                                            <span class="float-end">
                                                <i class="fa fa-star animated-star"></i>
                                            </span>
                                        }
                                    </h6>
                                </div>
                                <div class="card-body @(isAdopted ? "adopted-body" : "")">
                                    @if (isAdopted && isUserRole)
                                    {
                                        <div class="congratulations-banner mb-3">
                                            <div class="text-center py-3">
                                                <i class="fa fa-trophy text-warning fa-2x mb-2 animated-bounce"></i>
                                                <h6 class="text-success fw-bold mb-1">🎉 Congratulations! 🎉</h6>
                                                <p class="small text-muted mb-0">You're now a loving pet parent!</p>
                                            </div>
                                        </div>
                                    }
                                    
                                    @if (pet != null)
                                    {
                                        <div class="position-relative">
                                            @if (!string.IsNullOrEmpty(pet.Image1Url))
                                            {
                                                <img src="@pet.Image1Url" 
                                                     class="card-img-top mb-3 rounded @(isAdopted ? "adopted-image" : "")" 
                                                     alt="@pet.PartitionKey"
                                                     style="height: 200px; object-fit: cover;"
                                                     onerror="this.src='/images/placeholder-pet.jpg';" />
                                                @if (isAdopted)
                                                {
                                                    <div class="heart-overlay">
                                                        <i class="fa fa-heart fa-3x text-danger animated-heartbeat"></i>
                                                    </div>
                                                }
                                            }
                                        </div>
                                        <p class="mb-1"><strong>Species:</strong> @pet.Species</p>
                                        <p class="mb-1"><strong>Age:</strong> @GetPetAge(pet.RowKey)</p>
                                        <p class="mb-1"><strong>Shelter:</strong> @pet.ShelterName</p>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning small">Pet information unavailable</div>
                                    }

                                    <hr />

                                    @if (!isUserRole && applicantUser != null)
                                    {
                                        <h6 class="mt-3"><i class="fa fa-user"></i> Applicant</h6>
                                        <p class="mb-1"><strong>Name:</strong> @applicantUser.PartitionKey</p>
                                        <p class="mb-1"><strong>Email:</strong> @applicantUser.RowKey</p>
                                        <p class="mb-1"><strong>Phone:</strong> @applicantUser.PhoneNumber</p>
                                        <hr />
                                    }

                                    <p class="mb-1">
                                        <strong>Status:</strong> 
                                        <span class="badge bg-@GetStatusColor(application.AdoptionStatus) @(isAdopted ? "pulse-badge" : "")">
                                            @if (isAdopted)
                                            {
                                                <i class="fa fa-heart me-1"></i>
                                            }
                                            @GetStatusDisplay(application.AdoptionStatus, isUserRole)
                                        </span>
                                    </p>
                                    <p class="mb-1"><strong>Submitted:</strong> @application.DateSubmitted.ToShortDateString()</p>

                                    @if (isAdopted && isUserRole)
                                    {
                                        <div class="mt-3 p-2 bg-light rounded border border-success">
                                            <p class="small text-success mb-0">
                                                <i class="fa fa-check-circle"></i> 
                                                <strong>Welcome to your new family member!</strong> 
                                                Thank you for giving @application.PetName a forever home filled with love! 💕
                                            </p>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(application.Notes))
                                    {
                                        <hr />
                                        <p class="mb-1"><strong>Notes:</strong></p>
                                        <p class="small text-muted">@application.Notes</p>
                                    }
                                </div>
                                <div class="card-footer @(isAdopted ? "bg-success bg-opacity-10" : "bg-light")">
                                    <button class="btn btn-sm @(isAdopted ? "btn-success" : "btn-primary") w-100" @onclick="() => ViewApplicationDetails(application, pet, applicantUser)">
                                        <i class="fa @(isAdopted ? "fa-heart" : "fa-eye")"></i> 
                                        @(isAdopted ? "View Adoption" : "View Details")
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </section>
</div>

@* Application Details Modal *@
@if (showDetailsModal && selectedApplication != null)
{
    var isAdoptedModal = selectedApplication.AdoptionStatus == AdoptionStatus.Adopted;
    
    <ModalHelper OnClose="CloseDetailsModal" ModalId="application-details-modal" />
    <div id="application-details-modal" class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content @(isAdoptedModal ? "adopted-modal" : "")">
                <div class="modal-header bg-@GetStatusColor(selectedApplication.AdoptionStatus) text-white position-relative">
                    @if (isAdoptedModal)
                    {
                        <div class="confetti-container">
                            <span class="confetti">🎊</span>
                            <span class="confetti">🎉</span>
                            <span class="confetti">✨</span>
                            <span class="confetti">🌟</span>
                            <span class="confetti">💝</span>
                        </div>
                    }
                    <h5 class="modal-title">
                        <i class="fa @(isAdoptedModal ? "fa-heart" : "fa-paw")"></i> 
                        @(isAdoptedModal ? "Successful Adoption" : "Adoption Application Details") - @selectedApplication.PetName
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDetailsModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (isProcessing)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Processing...</span>
                            </div>
                            <p class="mt-2">Processing your request...</p>
                        </div>
                    }
                    else
                    {
                        @if (isAdoptedModal && isUserRole)
                        {
                            <div class="adoption-success-message text-center py-4 mb-4">
                                <i class="fa fa-trophy text-warning fa-4x mb-3 animated-bounce"></i>
                                <h3 class="text-success fw-bold mb-3">
                                    🎉 Congratulations on Your New Family Member! 🎉
                                </h3>
                                <p class="lead text-muted mb-3">
                                    You've given <strong class="text-primary">@selectedApplication.PetName</strong> a loving forever home!
                                </p>
                                <div class="row justify-content-center mb-3">
                                    <div class="col-auto">
                                        <div class="p-3 bg-light rounded-circle">
                                            <i class="fa fa-heart text-danger fa-2x animated-heartbeat"></i>
                                        </div>
                                    </div>
                                </div>
                                <p class="text-muted mb-0">
                                    This is the beginning of a beautiful journey together. 
                                    Thank you for choosing adoption and making a difference in @selectedApplication.PetName's life! 💕
                                </p>
                                <hr class="my-4" />
                            </div>
                        }
                        
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fa fa-paw"></i> Pet Information</h6>
                                @if (selectedPet != null)
                                {
                                    <div class="position-relative">
                                        @if (!string.IsNullOrEmpty(selectedPet.Image1Url))
                                        {
                                            <img src="@selectedPet.Image1Url" 
                                                 class="img-fluid rounded mb-3 @(isAdoptedModal ? "adopted-image-modal" : "")" 
                                                 alt="@selectedPet.PartitionKey"
                                                 style="max-height: 300px; width: 100%; object-fit: cover;"
                                                 onerror="this.src='/images/placeholder-pet.jpg';" />
                                            @if (isAdoptedModal)
                                            {
                                                <div class="adopted-badge-overlay">
                                                    <span class="badge bg-success fs-5 px-4 py-2">
                                                        <i class="fa fa-heart me-2"></i>ADOPTED<i class="fa fa-heart ms-2"></i>
                                                    </span>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <p><strong>Name:</strong> @selectedPet.PartitionKey</p>
                                    <p><strong>Species:</strong> @selectedPet.Species</p>
                                    <p><strong>Breed:</strong> @(selectedPet.Breed ?? "Not specified")</p>
                                    <p><strong>Gender:</strong> @selectedPet.Gender</p>
                                    <p><strong>Size:</strong> @selectedPet.Size</p>
                                    <p><strong>Age:</strong> @GetPetAge(selectedPet.RowKey)</p>
                                    <p><strong>Colour:</strong> @(selectedPet.Colour ?? "Not specified")</p>
                                    <p><strong>Neutered:</strong> @(selectedPet.Neutered ? "Yes" : "No")</p>
                                    <p><strong>Dewormed:</strong> @(selectedPet.Dewormed ? "Yes" : "No")</p>
                                    <p><strong>Chipped:</strong> @(selectedPet.Chipped ? "Yes" : "No")</p>
                                    <p><strong>Vaccinations:</strong> @selectedPet.Vaccinations</p>
                                    
                                    <h6 class="border-bottom pb-2 mb-2 mt-3">About</h6>
                                    <p class="small">@selectedPet.About</p>
                                    
                                    @if (!string.IsNullOrEmpty(selectedPet.MedicalTreatments))
                                    {
                                        <h6 class="border-bottom pb-2 mb-2 mt-3">Medical Treatments</h6>
                                        <p class="small">@selectedPet.MedicalTreatments</p>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(selectedPet.KnownMedicalIssues))
                                    {
                                        <h6 class="border-bottom pb-2 mb-2 mt-3">Known Medical Issues</h6>
                                        <p class="small text-danger">@selectedPet.KnownMedicalIssues</p>
                                    }

                                    <h6 class="border-bottom pb-2 mb-2 mt-3">Shelter</h6>
                                    <p><strong>Name:</strong> @selectedPet.ShelterName</p>
                                    <p><strong>Location:</strong> @selectedPet.ShelterLocation</p>
                                }
                                else
                                {
                                    <div class="alert alert-warning">Pet information unavailable</div>
                                }
                            </div>
                            
                            <div class="col-md-6">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fa fa-file-text"></i> Application Information</h6>
                                <p><strong>Status:</strong> 
                                    <span class="badge bg-@GetStatusColor(selectedApplication.AdoptionStatus) @(isAdoptedModal ? "pulse-badge" : "")">
                                        @if (isAdoptedModal)
                                        {
                                            <i class="fa fa-heart me-1"></i>
                                        }
                                        @GetStatusDisplay(selectedApplication.AdoptionStatus, isUserRole)
                                    </span>
                                </p>
                                <p><strong>Date Submitted:</strong> @selectedApplication.DateSubmitted.ToShortDateString()</p>
                                
                                @if (!string.IsNullOrEmpty(selectedApplication.Notes))
                                {
                                    <h6 class="border-bottom pb-2 mb-2 mt-3">Application Notes</h6>
                                    <p class="small">@selectedApplication.Notes</p>
                                }

                                @if (!isUserRole && selectedApplicant != null)
                                {
                                    <h6 class="border-bottom pb-2 mb-3 mt-4"><i class="fa fa-user"></i> Applicant Information</h6>
                                    <p><strong>Name:</strong> @selectedApplicant.PartitionKey</p>
                                    <p><strong>Email:</strong> @selectedApplicant.RowKey</p>
                                    <p><strong>Phone:</strong> @selectedApplicant.PhoneNumber</p>
                                    <p><strong>Address:</strong> @selectedApplicant.Address</p>
                                    <p><strong>Country:</strong> @selectedApplicant.Country</p>
                                    
                                    @if (!string.IsNullOrEmpty(selectedApplicant.Website))
                                    {
                                        <p><strong>Website:</strong> <a href="@selectedApplicant.Website" target="_blank">@selectedApplicant.Website</a></p>
                                    }
                                }

                                @if (isUserRole && selectedApplication.AdoptionStatus == AdoptionStatus.AcceptedByShelter)
                                {
                                    <div class="alert alert-info mt-4">
                                        <h6><i class="fa fa-info-circle"></i> Action Required</h6>
                                        <p class="mb-0 small">The shelter has accepted your application! Please review the pet's information and decide if you want to proceed with the adoption.</p>
                                    </div>
                                }

                                @if (!isUserRole && selectedApplication.AdoptionStatus == AdoptionStatus.AcceptedByUser)
                                {
                                    <div class="alert alert-success mt-4">
                                        <h6><i class="fa fa-check-circle"></i> Ready to Complete</h6>
                                        <p class="mb-0 small">The applicant has accepted the adoption! You can now confirm the adoption is complete once the pet has been handed over to the new family.</p>
                                    </div>
                                }
                                
                                @if (isAdoptedModal)
                                {
                                    <div class="alert alert-success mt-4 border-success">
                                        <h6 class="text-success"><i class="fa fa-check-circle"></i> Adoption Complete!</h6>
                                        <p class="small mb-2">
                                            This adoption was successfully completed. 
                                            @if (isUserRole)
                                            {
                                                <span>We wish you and @selectedApplication.PetName many happy years together!</span>
                                            }
                                            else
                                            {
                                                <span>Thank you for helping @selectedApplication.PetName find their forever home!</span>
                                            }
                                        </p>
                                        <div class="text-center mt-3">
                                            <i class="fa fa-paw text-success mx-1"></i>
                                            <i class="fa fa-heart text-danger mx-1"></i>
                                            <i class="fa fa-paw text-success mx-1"></i>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer @(isAdoptedModal ? "bg-success bg-opacity-10" : "")">
                    @* Shelter buttons - shown when status is Submitted *@
                    @if (!isUserRole && selectedApplication.AdoptionStatus == AdoptionStatus.Submitted && !isProcessing)
                    {
                        <button type="button" class="btn btn-success" @onclick="ShelterAcceptApplication">
                            <i class="fa fa-check"></i> Accept
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="ShelterRejectApplication">
                            <i class="fa fa-times"></i> Reject
                        </button>
                    }

                    @* User buttons - shown when status is AcceptedByShelter *@
                    @if (isUserRole && selectedApplication.AdoptionStatus == AdoptionStatus.AcceptedByShelter && !isProcessing)
                    {
                        <button type="button" class="btn btn-success" @onclick="UserAcceptApplication">
                            <i class="fa fa-heart"></i> Accept Adoption
                        </button>
                        <button type="button" class="btn btn-warning" @onclick="UserRejectApplication">
                            <i class="fa fa-times-circle"></i> Decline
                        </button>
                    }

                    @* Shelter button - shown when status is AcceptedByUser (FINAL STEP) *@
                    @if (!isUserRole && selectedApplication.AdoptionStatus == AdoptionStatus.AcceptedByUser && !isProcessing)
                    {
                        <button type="button" class="btn btn-success" @onclick="ConfirmAdoptionComplete">
                            <i class="fa fa-check-circle"></i> Adoption Successful
                        </button>
                    }

                    <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal" disabled="@isProcessing">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .application-card {
        transition: transform 0.2s, box-shadow 0.3s;
    }

    .application-card:hover {
        transform: translateY(-5px);
    }

    .modal.show.d-block {
        display: block !important;
    }

    /* Adopted Card Styles */
    .adopted-card {
        border: 3px solid #28a745;
        box-shadow: 0 0 20px rgba(40, 167, 69, 0.3);
        animation: gentle-glow 2s infinite alternate;
        position: relative;
        overflow: hidden;
    }

    @@keyframes gentle-glow {
        from {
            box-shadow: 0 0 20px rgba(40, 167, 69, 0.3);
        }
        to {
            box-shadow: 0 0 30px rgba(40, 167, 69, 0.5);
        }
    }

    .adoption-celebration-ribbon {
        position: absolute;
        top: 15px;
        right: -35px;
        background: linear-gradient(135deg, #ffd700, #ffed4e);
        color: #dc3545;
        padding: 5px 40px;
        font-weight: bold;
        font-size: 12px;
        transform: rotate(45deg);
        z-index: 10;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        animation: ribbon-shimmer 2s infinite;
    }

    @@keyframes ribbon-shimmer {
        0%, 100% {
            background: linear-gradient(135deg, #ffd700, #ffed4e);
        }
        50% {
            background: linear-gradient(135deg, #ffed4e, #ffd700);
        }
    }

    .adopted-body {
        background: linear-gradient(to bottom, #ffffff, #f8f9fa);
    }

    .congratulations-banner {
        background: linear-gradient(135deg, #e8f5e9, #f1f8e9);
        border-radius: 10px;
        border: 2px solid #28a745;
        animation: pulse-border 2s infinite;
    }

    @@keyframes pulse-border {
        0%, 100% {
            border-color: #28a745;
        }
        50% {
            border-color: #20c997;
        }
    }

    .animated-bounce {
        animation: bounce 1s infinite;
    }

    @@keyframes bounce {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-10px);
        }
    }

    .animated-heartbeat {
        animation: heartbeat 1.5s infinite;
    }

    @@keyframes heartbeat {
        0%, 100% {
            transform: scale(1);
        }
        10%, 30% {
            transform: scale(1.1);
        }
        20%, 40% {
            transform: scale(1);
        }
    }

    .animated-star {
        animation: star-twinkle 1.5s infinite;
    }

    @@keyframes star-twinkle {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
        }
        50% {
            opacity: 0.5;
            transform: scale(1.2);
        }
    }

    .pulse-badge {
        animation: pulse-badge 1.5s infinite;
    }

    @@keyframes pulse-badge {
        0%, 100% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.05);
            opacity: 0.9;
        }
    }

    .heart-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 0.8;
        filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.8));
    }

    .adopted-image {
        border: 3px solid #28a745;
        box-shadow: 0 0 15px rgba(40, 167, 69, 0.4);
    }

    .adopted-image-modal {
        border: 4px solid #28a745;
        box-shadow: 0 0 20px rgba(40, 167, 69, 0.5);
    }

    .adopted-badge-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        animation: badge-float 3s infinite ease-in-out;
    }

    @@keyframes badge-float {
        0%, 100% {
            transform: translate(-50%, -50%) translateY(0);
        }
        50% {
            transform: translate(-50%, -50%) translateY(-10px);
        }
    }

    .adoption-success-message {
        background: linear-gradient(135deg, #e8f5e9, #fff3cd, #e8f5e9);
        border-radius: 15px;
        border: 3px solid #28a745;
    }

    .adopted-modal {
        border: 3px solid #28a745;
    }

    .confetti-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 100%;
        overflow: hidden;
        pointer-events: none;
    }

    .confetti {
        position: absolute;
        font-size: 24px;
        animation: confetti-fall 5s infinite;
        opacity: 0.8;
    }

    .confetti:nth-child(1) {
        left: 10%;
        animation-delay: 0s;
    }

    .confetti:nth-child(2) {
        left: 30%;
        animation-delay: 1s;
    }

    .confetti:nth-child(3) {
        left: 50%;
        animation-delay: 2s;
    }

    .confetti:nth-child(4) {
        left: 70%;
        animation-delay: 3s;
    }

    .confetti:nth-child(5) {
        left: 90%;
        animation-delay: 4s;
    }

    @@keyframes confetti-fall {
        0% {
            top: -10%;
            transform: rotate(0deg);
        }
        100% {
            top: 110%;
            transform: rotate(720deg);
        }
    }
</style>

@code {
    private List<AdoptionApplication> applications = new();
    private Dictionary<AdoptionApplication, Pet?> applicationPets = new();
    private Dictionary<AdoptionApplication, User?> applicationUsers = new();
    private User? currentUser;
    private bool isLoading = true;
    private bool isUserRole = false;
    private string? errorMessage;
    private string? successMessage;
    private string pageTitle = "My Adoptions";

    // Modal state
    private bool showDetailsModal = false;
    private bool isProcessing = false;
    private AdoptionApplication? selectedApplication;
    private Pet? selectedPet;
    private User? selectedApplicant;

    protected override async Task OnInitializedAsync()
    {
        await LoadApplicationsAsync();
    }

    private async Task LoadApplicationsAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            applications.Clear();
            applicationPets.Clear();
            applicationUsers.Clear();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                if (!string.IsNullOrEmpty(email))
                {
                    currentUser = await UserService.GetUserByEmailAsync(email);

                    if (currentUser != null)
                    {
                        isUserRole = currentUser.Role == UserRole.User;

                        if (isUserRole)
                        {
                            pageTitle = "My Adoption Applications";
                            applications = (await AdoptionProcessService.GetUserAdoptionApplicationsAsync(
                                currentUser.RowKey)).ToList();
                        }
                        else if (currentUser.Role == UserRole.Shelter && 
                                 !string.IsNullOrEmpty(currentUser.ShelterName) && 
                                 !string.IsNullOrEmpty(currentUser.ShelterLocation))
                        {
                            pageTitle = "Adoption Applications for My Pets";
                            applications = (await AdoptionProcessService.GetShelterAdoptionApplicationsAsync(
                                currentUser.ShelterName, 
                                currentUser.ShelterLocation)).ToList();
                        }

                        // Load associated pets and users
                        foreach (var application in applications)
                        {
                            try
                            {
                                var pet = await AdoptionProcessService.GetPetForApplicationAsync(application);
                                applicationPets[application] = pet;

                                if (!isUserRole)
                                {
                                    var applicant = await AdoptionProcessService.GetUserForApplicationAsync(application);
                                    applicationUsers[application] = applicant;
                                }
                            }
                            catch (Exception ex)
                            {
                                Logger.LogWarning(ex, "Error loading pet/user for application: {Message}", ex.Message);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading adoption applications");
            errorMessage = $"Failed to load applications: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewApplicationDetails(AdoptionApplication application, Pet? pet, User? applicant)
    {
        selectedApplication = application;
        selectedPet = pet;
        selectedApplicant = applicant;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedApplication = null;
        selectedPet = null;
        selectedApplicant = null;
        isProcessing = false;
    }

    private async Task ShelterAcceptApplication()
    {
        if (selectedApplication == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await AdoptionProcessService.AcceptApplicationAsync(selectedApplication);
            
            if (result.Success)
            {
                successMessage = result.Message;
                CloseDetailsModal();
                await LoadApplicationsAsync();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error accepting application");
            errorMessage = $"Failed to accept application: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ShelterRejectApplication()
    {
        if (selectedApplication == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await AdoptionProcessService.RejectApplicationAsync(selectedApplication);
            
            if (result.Success)
            {
                successMessage = result.Message;
                CloseDetailsModal();
                await LoadApplicationsAsync();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rejecting application");
            errorMessage = $"Failed to reject application: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UserAcceptApplication()
    {
        if (selectedApplication == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await AdoptionProcessService.UserAcceptApplicationAsync(selectedApplication);
            
            if (result.Success)
            {
                successMessage = result.Message;
                CloseDetailsModal();
                await LoadApplicationsAsync();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error accepting application");
            errorMessage = $"Failed to accept application: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task UserRejectApplication()
    {
        if (selectedApplication == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await AdoptionProcessService.UserRejectApplicationAsync(selectedApplication);
            
            if (result.Success)
            {
                successMessage = result.Message;
                CloseDetailsModal();
                await LoadApplicationsAsync();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error rejecting application");
            errorMessage = $"Failed to reject application: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmAdoptionComplete()
    {
        if (selectedApplication == null) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            var result = await AdoptionProcessService.ConfirmAdoptionCompleteAsync(selectedApplication);
            
            if (result.Success)
            {
                successMessage = result.Message;
                CloseDetailsModal();
                await LoadApplicationsAsync();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error confirming adoption completion");
            errorMessage = $"Failed to confirm adoption: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private string GetPetAge(string birthDateString)
    {
        if (!DateTime.TryParse(birthDateString, out var birthDate))
            return "Unknown";

        var age = DateTime.Now - birthDate;
        var years = (int)(age.TotalDays / 365.25);
        var months = (int)((age.TotalDays % 365.25) / 30.44);

        if (years > 0)
        {
            return months > 0 ? $"{years}y {months}m" : $"{years}y";
        }
        else if (months > 0)
        {
            return $"{months}m";
        }
        else
        {
            return $"{(int)age.TotalDays}d";
        }
    }

    private string GetStatusColor(AdoptionStatus status)
    {
        return status switch
        {
            AdoptionStatus.NotAdopted => "secondary",
            AdoptionStatus.Submitted => "primary",
            AdoptionStatus.AcceptedByShelter => "info",
            AdoptionStatus.AcceptedByUser => "success",
            AdoptionStatus.Adopted => "success",
            _ => "secondary"
        };
    }

    private string GetStatusDisplay(AdoptionStatus status, bool isUserRole)
    {
        return status switch
        {
            AdoptionStatus.NotAdopted => "Not Adopted",
            AdoptionStatus.Submitted => "Pending Review",
            AdoptionStatus.AcceptedByShelter => "Accepted by Shelter",
            AdoptionStatus.AcceptedByUser => isUserRole ? "Accepted by You" : "Accepted by Applicant",
            AdoptionStatus.Adopted => "Adopted",
            _ => status.ToString()
        };
    }
}