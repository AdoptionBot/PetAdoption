@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using PetAdoption.Services.Interfaces
@using PetAdoption.Services
@using PetAdoption.Data.TableStorage
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject IUserService UserService
@inject IShelterService ShelterService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ProfileStateService ProfileState
@rendermode InteractiveServer

<PageTitle>My Profile - Madeira Pet Adoption</PageTitle>

<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">My Profile</h3>
                </div>
                <div class="card-body p-4">
                    @if (!isProfileComplete)
                    {
                        <div class="alert alert-warning">
                            <strong>Complete Your Profile</strong>
                            <p class="mb-0">Please complete all required fields and save your profile before you can access other parts of the website.</p>
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (currentUser != null)
                    {
                        <EditForm Model="currentUser" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">@successMessage</div>
                            }

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">@errorMessage</div>
                            }

                            <!-- User Form Section -->
                            <div class="mb-4">
                                <h5 class="border-bottom pb-2">User Information</h5>
                                
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" value="@currentUser.RowKey" disabled />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">User Name <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="currentUser.PartitionKey" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.PartitionKey)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="currentUser.PhoneNumber" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.PhoneNumber)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Address <span class="text-danger">*</span></label>
                                    <InputTextArea @bind-Value="currentUser.Address" class="form-control" rows="3" />
                                    <ValidationMessage For="@(() => currentUser.Address)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Country <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="currentUser.Country" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.Country)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Website (Optional)</label>
                                    <InputText @bind-Value="currentUser.Website" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.Website)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Facebook (Optional)</label>
                                    <InputText @bind-Value="currentUser.Facebook" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.Facebook)" />
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Instagram (Optional)</label>
                                    <InputText @bind-Value="currentUser.Instagram" class="form-control" />
                                    <ValidationMessage For="@(() => currentUser.Instagram)" />
                                </div>
                            </div>

                            <!-- Shelter Toggle -->
                            <div class="mb-4 p-3 bg-light rounded">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="shelterToggle" 
                                           @bind="isShelterMode" @bind:after="OnShelterToggleChanged">
                                    <label class="form-check-label fw-bold" for="shelterToggle">
                                        I am registering a Shelter
                                    </label>
                                </div>
                                <small class="text-muted">Enable this if you want to register your organization as a shelter</small>
                            </div>

                            <!-- Shelter Form Section (conditionally displayed) -->
                            @if (isShelterMode && currentShelter != null)
                            {
                                <EditForm Model="currentShelter" Context="shelterFormContext">
                                    <DataAnnotationsValidator />
                                    
                                    <div class="mb-4 border-top pt-4">
                                        <h5 class="border-bottom pb-2">Shelter Information</h5>
                                        
                                        <div class="mb-3">
                                            <label class="form-label">Shelter Name <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentShelter.PartitionKey" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.PartitionKey)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Shelter City/Town <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentShelter.RowKey" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.RowKey)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Country <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentShelter.Country" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.Country)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Phone Number <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentShelter.PhoneNumber" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.PhoneNumber)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Address <span class="text-danger">*</span></label>
                                            <InputTextArea @bind-Value="currentShelter.Address" class="form-control" rows="3" />
                                            <ValidationMessage For="@(() => currentShelter.Address)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Email <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentShelter.Email" class="form-control" type="email" />
                                            <ValidationMessage For="@(() => currentShelter.Email)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Website (Optional)</label>
                                            <InputText @bind-Value="currentShelter.Website" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.Website)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Facebook (Optional)</label>
                                            <InputText @bind-Value="currentShelter.Facebook" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.Facebook)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Instagram (Optional)</label>
                                            <InputText @bind-Value="currentShelter.Instagram" class="form-control" />
                                            <ValidationMessage For="@(() => currentShelter.Instagram)" />
                                        </div>
                                    </div>
                                </EditForm>
                            }

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary btn-lg" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            Unable to load user profile. Please try again later.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User? currentUser;
    private Shelter? currentShelter;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isProfileComplete = false;
    private bool isShelterMode = false;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
                if (!string.IsNullOrEmpty(email))
                {
                    currentUser = await UserService.GetUserByEmailAsync(email);
                    if (currentUser != null)
                    {
                        isProfileComplete = currentUser.ProfileCompleted;
                        
                        // Check if user has shelter data
                        if (!string.IsNullOrEmpty(currentUser.ShelterName) && !string.IsNullOrEmpty(currentUser.ShelterLocation))
                        {
                            // Try to load existing shelter
                            currentShelter = await ShelterService.GetShelterAsync(currentUser.ShelterName, currentUser.ShelterLocation);
                            isShelterMode = currentShelter != null;
                        }
                        
                        // Initialize empty shelter if not loaded
                        if (currentShelter == null)
                        {
                            currentShelter = new Shelter();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load profile: " + ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isProfileComplete)
        {
            // Register navigation guard using JavaScript
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('beforeunload', function(e) {
                    if (!window.profileCompleted) {
                        e.preventDefault();
                        e.returnValue = '';
                    }
                });
            ");
        }
    }

    private void OnShelterToggleChanged()
    {
        if (!isShelterMode)
        {
            // Reset shelter data when toggled off
            currentShelter = new Shelter();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (currentUser == null) return;

        isSaving = true;
        successMessage = null;
        errorMessage = null;

        try
        {
            // Validate shelter form if shelter mode is enabled
            if (isShelterMode && currentShelter != null)
            {
                var shelterValidationContext = new ValidationContext(currentShelter);
                var shelterValidationResults = new List<ValidationResult>();
                bool isShelterValid = Validator.TryValidateObject(currentShelter, shelterValidationContext, shelterValidationResults, true);

                if (!isShelterValid)
                {
                    errorMessage = "Please complete all required shelter fields: " + 
                        string.Join(", ", shelterValidationResults.Select(r => r.ErrorMessage));
                    return;
                }

                // Save shelter entity
                if (string.IsNullOrEmpty(currentShelter.ETag.ToString()) || currentShelter.ETag == default)
                {
                    await ShelterService.AddShelterAsync(currentShelter);
                }
                else
                {
                    await ShelterService.UpdateShelterAsync(currentShelter);
                }

                // Update user with shelter reference
                currentUser.ShelterName = currentShelter.PartitionKey;
                currentUser.ShelterLocation = currentShelter.RowKey;
                currentUser.Role = UserRole.Shelter;
            }
            else
            {
                // Clear shelter references if not in shelter mode
                currentUser.ShelterName = null;
                currentUser.ShelterLocation = null;
                if (currentUser.Role == UserRole.Shelter)
                {
                    currentUser.Role = UserRole.User;
                }
            }

            // Mark profile as completed
            currentUser.ProfileCompleted = true;
            
            await UserService.UpdateUserAsync(currentUser);
            
            isProfileComplete = true;
            successMessage = isShelterMode 
                ? "Profile and shelter information updated successfully! You can now navigate to other pages."
                : "Profile updated successfully! You can now navigate to other pages.";
            
            // Allow navigation after profile completion
            await JSRuntime.InvokeVoidAsync("eval", "window.profileCompleted = true;");
            
            // Notify other components that profile is completed
            ProfileState.NotifyProfileCompleted();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to update profile: " + ex.Message;
            currentUser.ProfileCompleted = false;
        }
        finally
        {
            isSaving = false;
        }
    }
}